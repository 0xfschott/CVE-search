import requests
import argparse
import urllib
import sys


API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"
KEYWORD_SEARCH_URL = "https://nvd.nist.gov/products/cpe/search/results"

parser = argparse.ArgumentParser(description="Search for CVEs in NIST's database")
parser.add_argument(
    "-k",
    "--keyword",
    help="Search for keyword (e.g. Apache Tomcat 9.0)",
    type=str,
    required=False,
)
parser.add_argument("-i", "--cve", nargs="+", help="List of CVEs", required=False)
parser.add_argument(
    "-c", "--cpe", help="cpe v2.3 (e.g. cpe:2.3:a:jquery:jquery:2.2.4)", required=False
)
parser.add_argument(
    "-l", "--limit", help="Limit results by last n CVEs", type=int, required=False
)
parser.add_argument(
    "-f",
    "--format",
    help="Specify output format",
    default="markdown",
    choices=["markdown", "html", "docx"],
    required=False,
)
args = parser.parse_args()

limit = args.limit

if not args.keyword and not args.cpe and not args.cve:
    print("You must at least specify a keyword or cpe!")
    sys.exit(1)

if args.keyword and args.cpe:
    print("Specify either a keyword or a cpe!")
    sys.exit(1)

cpeName = None
if args.cpe:
    cpeName = args.cpe

elif args.keyword:
    try:
        from bs4 import BeautifulSoup
    except:
        print("Keyword search needs BeautifulSoap!")
        sys.exit(1)
    results_raw = requests.get(
        KEYWORD_SEARCH_URL, params=[("namingFormat", "2.3"), ("keyword", args.keyword)]
    ).content
    parsed_html = BeautifulSoup(results_raw, features="html.parser")
    cpes = [
        cpe_link.text
        for cpe_link in parsed_html.select('[data-testid^="cpe-detail-link"]')
    ]
    if len(cpes) > 1:
        print("Found multiple CPEs matching the keyword search.")
        for i, cpe in enumerate(cpes):
            print(f"({i+1}) {cpe}")
        selected = int(input("Select CPE:"))
        cpeName = cpes[selected - 1]
    elif len(cpes) == 0:
        print("No CPE found")
        sys.exit(1)
    else:
        cpeName = cpes[0]

params = {"cpeName": cpeName, "resultsPerPage": 1000}

if args.cve:
    print(args.cve)

if args.cve:
    print(f"Returning details for {args.cve}:")
    cves = []
    for c in args.cve:
        params = {"cveId": c}
        cves.extend(requests.get(API_URL, params=params).json()["vulnerabilities"])
else:
    print(f"Returning latest CVEs (Only CVSS >= 3.0) for {cpeName}:")
    cves = requests.get(API_URL, params=params).json()["vulnerabilities"]
cves = [cve for cve in cves if "cvssMetricV31" in cve["cve"]["metrics"]]
cves.sort(key=lambda x: x["cve"]["id"], reverse=True)
cves.sort(
    key=lambda x: x["cve"]["metrics"]["cvssMetricV31"][0]["cvssData"]["baseScore"],
    reverse=True,
)


def cellcolor(severity):
    if severity == "INFO":
        return "infobg"
    if severity == "LOW":
        return "lowbg"
    elif severity == "MEDIUM":
        return "moderatebg"
    elif severity == "HIGH":
        return "highbg"
    else:
        return "criticalbg"


def sanitize_for_latex(summary):
    word_list = summary.split()
    result = " ".join(sanitize_for_latex_help(word) for word in word_list)
    return result


def sanitize_for_latex_help(word):
    bad_chars = [
        "%",
        "_",
        "$",
        "\\",
        "[",
    ]
    for bad_char in bad_chars:
        if bad_char in word:
            return "`" + word + "`"
    return word


errors = []
cvss2 = []


def markdown_table():
    print("| CVE | Score | Description |")
    print("| --- | ----- | ----------- |")
    for i, item in enumerate(cves):
        if limit:
            if i >= limit:
                break
        try:
            if "cvssMetricV31" not in item["cve"]["metrics"]:
                cvss2.append(item["cve"]["id"])
                continue
            cve_score = item["cve"]["metrics"]["cvssMetricV31"][0]["cvssData"][
                "baseScore"
            ]
            cve_description = item["cve"]["descriptions"][0]["value"].replace("\n", "")
            print(
                f'| {str(item["cve"]["id"])} | {str(cve_score)} | {cve_description} |'
            )
        except Exception as e:
            errors.append(e)
    if len(cvss2) > 0:
        print(
            "\n\n[!INFO!] No CVSS3 Score is available for the following CVEs. Thus they are not listed in the table:"
        )
        for c in cvss2:
            print(f"- {c}")

    if len(errors) > 0:
        print(errors)


def word_table():
    from docx import Document
    from docx.shared import Cm, Inches

    word_document = Document()
    table = word_document.add_table(0, 0)
    table.style = "TableGrid"
    table.add_column(Inches(1.5))
    table.add_column(Inches(1))
    table.add_column(Inches(5))

    tab_index = 0
    for i, item in enumerate(cves):

        if limit:
            if i >= limit:
                break
        try:
            if "baseMetricV3" not in item["impact"]:
                cvss2.append(item["cve"]["CVE_data_meta"]["ID"])
                continue
            cve_score = item["impact"]["baseMetricV3"]["cvssV3"]["baseScore"]
            cve_description = item["cve"]["description"]["description_data"][0]["value"]

            table.add_row()
            row = table.rows[tab_index]
            row.cells[0].text = str(item["cve"]["CVE_data_meta"]["ID"])
            row.cells[1].text = str(cve_score)
            row.cells[2].text = str(cve_description)
            tab_index = tab_index + 1
        except Exception as e:
            print(e)

    if len(cvss2) > 0:
        print(
            "\n\n[!INFO!] No CVSS3 Score is available for the following CVEs. Thus they are not listed in the table:"
        )
        for c in cvss2:
            print(f"- {c}")

    word_document.save("cves.docx")


def html_table():
    print("<table>")
    print("\t<thead>")
    print("\t<tr>")
    print('\t\t<th class="width-20 text-align-center">CVE</th>')
    print("\t\t<th>Score</th>")
    print("\t\t<th>Description</th>")
    print("\t</tr>")
    print("\t</thead>")
    print("\t<tbody>")
    for i, item in enumerate(cves):
        if limit:
            if i >= limit:
                break
        try:
            if "cvssMetricV31" not in item["cve"]["metrics"]:
                cvss2.append(item["cve"]["id"])
                continue
            cve_score = item["cve"]["metrics"]["cvssMetricV31"][0]["cvssData"][
                "baseScore"
            ]
            cve_description = item["cve"]["descriptions"][0]["value"]
            print("\t<tr>")
            print(
                f'\t\t<td class="width-20 text-align-center"><b>{str(item["cve"]["id"])}</b></td>'
            )
            print(f'\t\t<td class="text-align-center width-10">{str(cve_score)}</td>')
            print(f"\t\t<td>{cve_description}</td>")
            print(f"\t</tr>")
        except Exception as e:
            errors.append(e)
    print("\t</tbody>")
    print("</table>")

    if len(cvss2) > 0:
        print(
            "\n\n[!INFO!] No CVSS3 Score is available for the following CVEs. Thus they are not listed in the table:"
        )
        for c in cvss2:
            print(f"- {c}")

    if len(errors) > 0:
        print(errors)


if args.format == "markdown":
    markdown_table()
elif args.format == "html":
    html_table()
else:
    word_table()
